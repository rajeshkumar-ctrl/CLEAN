This assignment was locked Apr 23 at 11:59pm.
Upload just .icl file.

Your submission should not have any errors when running the code.

It is possible to get partial points for not working code, but please make sure you comment out the errors.

You should not delete anything from the given code, given test cases should stay the same, but you can add your tests as well.

Don't change the given function signatures, however, you can add as many functions as you wish, just make sure to name them appropriately (if function squares the number, call it 'square', 'second_power', etc. and not 'f' or 'g'). The same goes for variable names. Make sure that you comment all 'Start'-s before submitting the code.

 

:: Tree a = Node a (Tree a) (Tree a) | Leaf

tree1 :: Tree Int
tree1 = (Node 4 (Node 10 (Node 6 Leaf Leaf)(Node 11 Leaf Leaf)) (Node 20 (Node 12 Leaf Leaf) Leaf))

tree2 :: Tree Int
tree2 = (Node 5 (Node 10 (Node 31 (Node 1 Leaf Leaf) Leaf) Leaf) (Node 17 (Node 31 (Node 14 (Node 12 Leaf Leaf) Leaf) Leaf) (Node 11 Leaf Leaf) ))

tree3 :: Tree Int
tree3 = (Node 12 (Node 11 (Node 11 (Node 32 Leaf Leaf) Leaf) Leaf) (Node 4 (Node 17 (Node 5 (Node 7 Leaf Leaf) Leaf) Leaf) (Node 3 Leaf (Node 4 Leaf Leaf)) ))

tree4 :: Tree Int
tree4 = (Node 7 (Node 11 tree1 tree2) (Node 5 tree3 tree2))

tree5 :: Tree Int
tree5 = Node 1 tree3 tree4

/* 1. Given the binary tree, count number of leaf nodes in the tree.
*/

countLeaves :: (Tree a) -> Int

// Start = countLeaves tree1 // 7
// Start = countLeaves tree2 // 10
// Start = countLeaves tree3 // 11
// Start = countLeaves tree4 // 38
// Start = countLeaves tree5 // 49

/* 2. Given the binary tree, find how many nodes are there such that they have exactly
3 grandchildren non-leaf nodes.
Ex.: 1
/ \
2 3
/ \ / \
4 5 6 Leaf
1st node has exactly 3 grandchildrens, so it's a 'good' node.
*/

countTripleParents :: (Tree Int) -> Int


// Start = countTripleParents tree1 // 1
// Start = countTripleParents tree2 // 1
// Start = countTripleParents tree3 // 1
// Start = countTripleParents tree4 // 4
// Start = countTripleParents tree5 // 5

/* 3. Implement a function that interleaves three arrays. So for input arrays {1,2,3}, {4,5,6}
and {7,8,9} the function must return the array {1,4,7,2,5,8,3,6,9}. If an array is out of elements
we continue interleaving the remaining arrays.
Example: {1,2} {3,4,5,6} {7,8,9} -> {1,3,7,2,4,8,5,9,6}
*/

interleave :: {Int} {Int} {Int} -> {Int}

// Start = interleave {1,2,3} {4,5,6} {7,8,9} // {1,4,7,2,5,8,3,6,9}
// Start = interleave {1,2} {3,4,5,6} {7,8,9} // {1,3,7,2,4,8,5,9,6}
// Start = interleave {} {1,2,3} {4} // {1,4,2,3}
// Start = interleave {} {} {} // {}
// Start = interleave {1,2} {3,4,5} {6,7,8,9,10,11,12} // {1,3,6,2,4,7,5,8,9,10,11,12}
