# FourthAssignment
Your submission should not have any errors when running the code.

It is possible to get partial points for not working code, but please make sure you comment out the errors.

You should not delete anything from the given code, given test cases should stay the same, but you can add your tests as well.
Don't change the given function signatures, however, you can add as many functions as you wish, just make sure to name them appropriately (if function squares the number, call it 'square', 'second_power', etc. and not 'f' or 'g'). The same goes for variable names. 

Make sure that you comment all 'Start'-s before submitting the code.

module code
import StdEnv

/*
1.Given two numbers L and R and the list of tuples, where the first element is an number
and the second is string. Return the list of strings from tuples where first element
is a number in interval [L,R].
*/

stringInRange :: Int Int [(Int,String)] -> [String]

// Start = stringInRange 2 7 [(1,"A"), (2,"B"), (3,"C"), (11,"D"), (3,"E"), (5,"F")] // ["B","C","E","F"]
// Start = stringInRange 1 15 [(1,"A"), (2,"B"), (3,"C"), (11,"D"), (3,"E"), (5,"F")] // ["A","B","C","D","E","F"]
// Start = stringInRange 2 3 [(1,"A"), (2,"B"), (5,"F")] // ["B"]
// Start = stringInRange 3 4 [(1,"A"), (2,"B"), (5,"F")] // []
// Start = stringInRange 7 2 [(1,"A"), (2,"B"), (5,"F"), (3,"C"), (11,"D"), (3,"E"), (5,"F")] // []

/*
2.Write a function which takes 2 list of integers and 1 list of booleans and returns
a single list of tuples, where i-th tuple contains i-th elements from input lists.
Returned list's size should be equal to the shortest input list's size.
*/

tripleZip :: [Int] [Int] [Bool] -> [(Int,Int,Bool)]

// Start = tripleZip [1,5,7] [4,10,2,3] [False, True, True] // [(1,4,False),(5,10,True),(7,2,True)]
// Start = tripleZip [1..10] [11..20] [False \\ x <- [1..50]] // [(1,11,False),(2,12,False),(3,13,False),(4,14,False),(5,15,False),(6,16,False),(7,17,False),(8,18,False),(9,19,False),(10,20,False)]
// Start = tripleZip [1,3..20] [4,10,2,3] [False, True, True] // [(1,4,False),(3,10,True),(5,2,True)]
// Start = tripleZip [] [11..20] [True \\ x <- [1..15]] // []


/*
3.Write a function which gets a number K and list of numbers and divides it into sublists
of size K. Last partition may have smaller size than K. After that sort each sublist and
return list of lists.
Ex.: K = 3, List = [1,7,3,5,2,3,11,8] -> [[1,7,3], [5,2,3], [11,8]]
-> [[1,3,7],[2,3,5],[8,11]]
*/

listDivider :: Int [Int] -> [[Int]]

// Start = listDivider 3 [1,7,3,5,2,3,11,8] // [[1,3,7],[2,3,5],[8,11]]
// Start = listDivider 1 [5,4..2] // [[5],[4],[3],[2]]
// Start = listDivider 4 [5,4..2] // [[2,3,4,5]]
// Start = listDivider 5 ([7,6..2] ++ [1..5] ++ [5,7..11]) // [[3,4,5,6,7],[1,2,2,3,4],[5,5,7,9,11]]
