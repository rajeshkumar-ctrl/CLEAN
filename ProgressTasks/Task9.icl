module Task9 
import StdEnv 
:: Tree a = Node a (Tree a) (Tree a) | Leaf bestTree = Node 10(Node 6(Node 1 Leaf(Node 5(Node 2 Leaf(Node 4(Node 3 Leaf Leaf)Leaf))Leaf))Leaf)(Node 14(Node 11 Leaf(Node 13(Node 12 Leaf Leaf)Leaf))(Node 17(Node 15 Leaf(Node 16 Leaf Leaf))(Node 19(Node 18 Leaf Leaf)(Node 20 Leaf Leaf)))) ourTree = Node 15(Node 3(Node 1 Leaf Leaf)(Node 10(Node 7 Leaf (Node 8 Leaf Leaf))(Node 13 (Node 11 Leaf Leaf) Leaf)))(Node 20 (Node 18 Leaf (Node 19 Leaf Leaf)) (Node 21 Leaf (Node 26 (Node 24 Leaf Leaf) (Node 28 Leaf Leaf)))) shortTree = Node 14(Node 11 Leaf(Node 13 Leaf Leaf))(Node 17(Node 15 Leaf Leaf)Leaf) noTree = Leaf unitTree = Node 1337 Leaf Leaf leaves 

:: (Tree Int) -> [Int] leaves (Leaf) = [] leaves (Node x left right) | (leafPart left == 1) && (leafPart right == 1) = [x] ++ leaves (left) ++ leaves (right) = leaves (left) ++ leaves (right) leafPart :: (Tree Int) -> Int leafPart (Leaf) = 1 leafPart (Node x left right) = leafPart left + leafPart right //Start = leaves bestTree //[3,12,16,18,20] //Start = leaves ourTree //[1,8,11,19,24,28] //Start = leaves unitTree //[1337] //Start = leaves noTree //[] Professor, i made a mistake again that i did in my previous task. module Progresstask import StdEnv :: Tree a = Node a (Tree a) (Tree a) | Leaf bestTree = Node 10(Node 6(Node 1 Leaf(Node 5(Node 2 Leaf(Node 4(Node 3 Leaf Leaf)Leaf))Leaf))Leaf)(Node 14(Node 11 Leaf(Node 13(Node 12 Leaf Leaf)Leaf))(Node 17(Node 15 Leaf(Node 16 Leaf Leaf))(Node 19(Node 18 Leaf Leaf)(Node 20 Leaf Leaf)))) ourTree = Node 15(Node 3(Node 1 Leaf Leaf)(Node 10(Node 7 Leaf (Node 8 Leaf Leaf))(Node 13 (Node 11 Leaf Leaf) Leaf)))(Node 20 (Node 18 Leaf (Node 19 Leaf Leaf)) (Node 21 Leaf (Node 26 (Node 24 Leaf Leaf) (Node 28 Leaf Leaf)))) shortTree = Node 14(Node 11 Leaf(Node 13 Leaf Leaf))(Node 17(Node 15 Leaf Leaf)Leaf) noTree = Leaf unitTree = Node 1337 Leaf Leaf leaves :: (Tree Int) -> [Int] leaves (Leaf) = [] leaves (Node x left right) | (leafPart left == 1) && (leafPart right == 1) = [x] ++ leaves (left) ++ leaves (right) = leaves (left) ++ leaves (right) leafPart :: (Tree Int) -> Int leafPart (Leaf) = 1 leafPart (Node x left right) = leafPart left + leafPart right //Start = leaves bestTree //[3,12,16,18,20] //Start = leaves ourTree //[1,8,11,19,24,28] //Start = leaves unitTree //[1337] //Start = leaves noTree //[] this works

// I will work on this later. 
